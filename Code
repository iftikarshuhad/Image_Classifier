import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt
fashion_mnist = keras.datasets.fashion_mnist
(train_images,train_labels),(test_images,test_labels)=fashion_mnist.load_data()
class_names=['T-shirt/top','Trouser','PullOver','Dress','Coat','Sandal','Shirt','Sneaker','Bag','Ankle Boot']
train_images.shape
len(train_labels)
train_images
#plot
plt.figure()
plt.imshow(train_images[0])
plt.colorbar()
plt.grid(False)
plt.show()
train_images =train_images/255.0
test_images =test_images/255.0

plt.figure(figsize=(10,10))
for i in range(25):
        plt.subplot(5,5,i+1)
        plt.xticks([])
        plt.yticks([])
        plt.grid(False)
        plt.imshow(train_images[i],cmap=plt.cm.binary)
        plt.xlabel(class_names[train_labels[i]])
plt.show()

#this is the Nodes (Deep Learning)
model = keras.Sequential(
[
    keras.layers.Flatten(input_shape=(28,28)),
    keras.layers.Dense(128,activation=tf.nn.relu),
    keras.layers.Dense(10,activation=tf.nn.softmax)
    ]
)
model.compile(
    optimizer='adam',
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)
model.fit(train_images,train_labels, epochs=5)   # train two times.
model.fit(train_images,train_labels, epochs=5)

test_loss, test_acc=model.evaluate(test_images,test_labels)
print('test_accuracy:',test_acc)

predic = model.predict(test_images)
predic[0]

np.argmax(predic[0])


def plot_image(i,predic_array,true_label,img):
    predic_array,ture,img=predic_array[i],true_label[i],img[i]
    plt.grid(False)
    plt.xticks([])
    plt.yticks([])
    
    plt.imshow(img,cmap=plt.cm.binary)
    predic_label=np.argmax(predic_array)
    if predic_label==true_label:
        color='blue'
    else:
        color='red'
    plt.xlabel("{} {:2.0f}% ({})".format(class_names[predic_label]),100*np.max(predic_array),
                                         class_names[true_label],color=color)
    
def plot_value_array(i,predic_array,true_label):
    predic_array,true_label=predic_array[i],true_label[i]
    plt.grid(False)
    plt.xticks([])
    plt.yticks([])
    thisplot=plt.bar(range(10),predic_array,color="#777777")
    plt.ylim(0,1)
    predic_label=np.argmax(predic_array)
    thisplot[predic_label].set_color('red')
    thisplot[true_label].set_color('green')

i=0
plt.figure(figsize=(6,3))
plt.subplot(1,2,1)
plot_image(i,predic,test_labels,test_images)
plt.subplot(1,2,2)
plot_value_array(i,predic,test_label)
plt.show()
